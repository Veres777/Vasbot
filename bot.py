import os
import requests
from datetime import datetime, timezone, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import random
import sys
from flask import Flask
from models import db, User  # importujeme model User a p≈ô√≠stup k DB
from telegram.constants import ParseMode
import pytz  


# Inicializace Flasku kv≈Øli pr√°ci s datab√°z√≠
flask_app = Flask(__name__)
flask_app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///users.db"
db.init_app(flask_app)

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
# Naƒçti .env soubor
load_dotenv()

# Token a API kl√≠ƒçe
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_KEYS = [os.getenv("ODDS_API_KEY_1"), os.getenv("ODDS_API_KEY_2")]

# Sporty
SUPPORTED_SPORTS = {
    "Fotbal": "soccer",
    "Basketbal": "basketball",
    "Hokej": "icehockey",
    "Tenis": "tennis"
}

OWNER_ID = 8175755323


# V√Ωchoz√≠ nastaven√≠ a √∫lo≈æi≈°tƒõ nastaven√≠ u≈æivatel≈Ø
default_settings = {
    "min_odds": 1.05,
    "min_probability": 80,
    "min_minutes": 30
}
user_settings = {}

def is_registered_user(telegram_id):
    with flask_app.app_context():
        return User.query.filter_by(telegram_id=str(telegram_id)).first() is not None

MAX_LENGTH = 4000  # Telegram limit je 4096 znak≈Ø, d√°me rezervu

async def send_long_message(update, message):
    for i in range(0, len(message), MAX_LENGTH):
        await update.message.reply_text(message[i:i+MAX_LENGTH], parse_mode="Markdown")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = (
        "*Dostupn√© p≈ô√≠kazy:* \n\n"
        "‚Ä¢ **/tiket** ‚Äì *Vygeneruje doporuƒçen√Ω tiket.*\n"
        "‚Ä¢ **/premium** ‚Äì *Pr√©miov√Ω tip (jen pro registrovan√©)*\n"
        "‚Ä¢ **/nastaveni** ‚Äì *Uprav√≠ parametry tiketu (kurz, ƒças, pravdƒõpodobnost).*\n"
        "‚Ä¢ **/stav** ‚Äì *Zobraz√≠ aktu√°ln√≠ stav p≈ô√≠stupu.*\n"
        "‚Ä¢ **/debug** ‚Äì *Uk√°≈æe p≈ôehled z√°pas≈Ø, kter√© pro≈°ly filtrem.*"
    )
    await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN)
    await update.message.reply_text(
        "üëã V√≠tej! Pro p≈ô√≠stup k pr√©miov√Ωm tip≈Øm se zaregistruj na webu:\n\n"
        "[üåê Otev≈ô√≠t registraci](https://vasbot.cz/registrace)",
        parse_mode=ParseMode.MARKDOWN
    )



from telegram.ext import CommandHandler
from datetime import datetime, timezone
import random

async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    premium_tips = []
    now = datetime.now(timezone.utc)

    for sport_name, sport_key in SUPPORTED_SPORTS.items():
        for api_key in API_KEYS:
            url = f"https://api.the-odds-api.com/v4/sports/{sport_key}/odds"
            params = {
                "apiKey": api_key,
                "regions": "eu",
                "markets": "h2h",
                "dateFormat": "iso",
            }

            try:
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                data = response.json()

                for match in data:
                    start_time = datetime.fromisoformat(match["commence_time"].replace("Z", "+00:00"))
                    if start_time <= now:
                        continue

                    home = match.get("home_team", "Nezn√°m√Ω t√Ωm")
                    away = match.get("away_team", "Nezn√°m√Ω t√Ωm")
                    bookmakers = match.get("bookmakers", [])
                    if not bookmakers:
                        continue

                    outcomes = bookmakers[0].get("markets", [])[0].get("outcomes", [])
                    for outcome in outcomes:
                        odds = outcome["price"]
                        if 1.3 <= odds <= 2.5:
                            probability = round((1 / odds) * 100, 2)
                            if 65 <= probability <= 85:
                                premium_tips.append({
                                    "sport": sport_name,
                                    "home": home,
                                    "away": away,
                                    "team": outcome["name"],
                                    "odds": odds,
                                    "probability": probability,
                                    "time": start_time.strftime("%d.%m.%Y %H:%M")
                                })

            except requests.exceptions.RequestException as e:
                await update.message.reply_text(f"Chyba p≈ôi naƒç√≠t√°n√≠ dat pro {sport_name}: {e}")
                break

    if premium_tips:
        best_match = random.choice(premium_tips)
        message = (
            "üíé *Pr√©miov√Ω tip dne:*\n\n"
            f"üèü *Sport:* {best_match['sport']}\n"
            f"‚öΩ *Z√°pas:* {best_match['home']} vs {best_match['away']}\n"
            f"‚è∞ *ƒåas:* {best_match['time']}\n"
            f"‚úÖ *Doporuƒçen√° s√°zka:* {best_match['team']} @ {best_match['odds']}\n"
            f"üìà *Pravdƒõpodobnost v√Ωhry:* {best_match['probability']} %"
        )
        await update.message.reply_text(message, parse_mode="Markdown")
    else:
        await update.message.reply_text("Dnes nebyl nalezen ≈æ√°dn√Ω vhodn√Ω pr√©miov√Ω z√°pas.")



# /nastaveni
async def nastaveni(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    args = context.args
    settings = user_settings.get(chat_id, default_settings.copy())

    if not args:
        await update.message.reply_text(
            f"üõ† Aktu√°ln√≠ nastaven√≠:\n\n"
            f"‚Ä¢ Minim√°ln√≠ kurz (kurz): {settings['min_odds']}\n"
            f"‚Ä¢ Minim√°ln√≠ pravdƒõpodobnost v√Ωhry (pravdepodobnost): {settings['min_probability']} %\n"
            f"‚Ä¢ Minim√°ln√≠ ƒças do zaƒç√°tku z√°pasu (cas): {settings['min_minutes']} minut\n\n"
            f"üìå Pokud chce≈° zmƒõnit nastaven√≠, pou≈æij nap≈ô.:\n"
            f"/nastaveni kurz=1.2 pravdepodobnost=85 cas=45"
        )
        return

    for arg in args:
        if arg.startswith("kurz="):
            try:
                settings["min_odds"] = float(arg.split("=")[1])
            except ValueError:
                pass
        elif arg.startswith("pravdepodobnost="):
            try:
                settings["min_probability"] = int(arg.split("=")[1])
            except ValueError:
                pass
        elif arg.startswith("cas="):
            try:
                settings["min_minutes"] = int(arg.split("=")[1])
            except ValueError:
                pass

    user_settings[chat_id] = settings

    await update.message.reply_text(
        f"‚úÖ Nov√© nastaven√≠ ulo≈æeno:\n\n"
        f"‚Ä¢ Minim√°ln√≠ kurz: {settings['min_odds']}\n"
        f"‚Ä¢ Minim√°ln√≠ pravdƒõpodobnost v√Ωhry: {settings['min_probability']} %\n"
        f"‚Ä¢ Z√°pas mus√≠ zaƒç√≠nat za min. {settings['min_minutes']} minut"
    )

# /debug
async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    settings = user_settings.get(chat_id, default_settings)
    now = datetime.now(timezone.utc)
    today_start = now.replace(hour=0, minute=1, second=0, microsecond=0)
    today_end = today_start + timedelta(days=1)

    debug_message = "üìä *Debug info podle aktu√°ln√≠ho nastaven√≠:*\n\n"

    for sport_name, sport_key in SUPPORTED_SPORTS.items():
        total_matches = 0
        passed_filters = 0

        for api_key in API_KEYS:
            url = f"https://api.the-odds-api.com/v4/sports/{sport_key}/odds"
            params = {
                "apiKey": api_key,
                "regions": "eu",
                "markets": "h2h",
                "dateFormat": "iso",
            }

            try:
                response = requests.get(url, params=params, timeout=10)
                if response.status_code != 200:
                    continue

                data = response.json()
                if not data:
                    continue

                for match in data:
                    commence_time = match.get("commence_time")
                    if not commence_time:
                        continue

                    start_time = datetime.fromisoformat(commence_time.replace("Z", "+00:00"))

                    # üéØ DNE≈†N√ç Z√ÅPAS
                    if not (today_start <= start_time <= today_end):
                        continue

                    total_matches += 1

                    # ‚è≥ ƒåAS DO ZAƒå√ÅTKU
                    if (start_time - now) < timedelta(minutes=settings["min_minutes"]):
                        continue

                    bookmakers = match.get("bookmakers", [])
                    if not bookmakers:
                        continue

                    outcomes = bookmakers[0].get("markets", [])[0].get("outcomes", [])
                    if not outcomes:
                        continue

                    best_outcome = min(outcomes, key=lambda x: x["price"])
                    odds = best_outcome["price"]
                    probability = round((1 / odds) * 100, 2)

                    if odds < settings["min_odds"]:
                        continue

                    if probability < settings["min_probability"]:
                        continue

                    passed_filters += 1

                break  # pou≈æij jen prvn√≠ funkƒçn√≠ API kl√≠ƒç

            except requests.exceptions.RequestException:
                continue

        debug_message += f"‚Ä¢ *{sport_name}*: {total_matches} z√°pas≈Ø / {passed_filters} vyhovuje\n"

    await update.message.reply_text(debug_message, parse_mode=ParseMode.MARKDOWN)

# /tiket
async def tiket(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.effective_user.id

    if not is_registered_user(telegram_id):
        await update.message.reply_text(
            "‚õî Tento bot je urƒçen pouze pro registrovan√© u≈æivatele.\n\n"
            "Pokud je≈°tƒõ nem√°≈° p≈ô√≠stup, zaregistruj se na webu."
        )
        return

    chat_id = update.effective_chat.id
    ticket_data = []
    now = datetime.now(timezone.utc)
    today_start = now.replace(hour=0, minute=1, second=0, microsecond=0)
    today_end = today_start + timedelta(days=1)

    for sport_name, sport_key in SUPPORTED_SPORTS.items():
        for api_key in API_KEYS:
            url = f"https://api.the-odds-api.com/v4/sports/{sport_key}/odds"
            params = {
                "apiKey": api_key,
                "regions": "eu",
                "markets": "h2h",
                "dateFormat": "iso",
            }

            try:
                response = requests.get(url, params=params, timeout=10)
                if response.status_code != 200:
                    continue

                data = response.json()
                if not data:
                    continue

                for match in data:
                    commence_time = match.get("commence_time", "Nezn√°m√Ω ƒças")
                    start_time = datetime.fromisoformat(commence_time.replace("Z", "+00:00"))

                    # ‚è∞ Pouze dne≈°n√≠ z√°pasy
                    if not (today_start <= start_time <= today_end):
                        continue

                    home_team = match.get("home_team", "Nezn√°m√Ω t√Ωm")
                    away_team = match.get("away_team", "Nezn√°m√Ω t√Ωm")
                    league = match.get("sport_title", "Nezn√°m√° liga")
                    bookmakers = match.get("bookmakers", [])
                    if not bookmakers:
                        continue

                    outcomes = bookmakers[0].get("markets", [])[0].get("outcomes", [])
                    if not outcomes:
                        continue

                    best_outcome = min(outcomes, key=lambda x: x["price"])
                    odds = best_outcome["price"]
                    probability = round((1 / odds) * 100, 2)

                    # üéØ Pouze s pravdƒõpodobnost√≠ 75 % a v√≠ce
                    if probability < 75:
                        continue

                    ticket_data.append({
                        "sport": sport_name,
                        "league": league,
                        "home": home_team,
                        "away": away_team,
                        "time": commence_time,
                        "team": best_outcome["name"],
                        "odds": odds,
                        "probability": probability
                    })

                break  # pou≈æij prvn√≠ funkƒçn√≠ API kl√≠ƒç

            except requests.exceptions.RequestException:
                continue

    if not ticket_data:
        await update.message.reply_text("‚ùå Nena≈°ly se ≈æ√°dn√© vhodn√© z√°pasy pro dne≈°n√≠ tiket.")
        return

    total_odds = 1
    ticket_message = "üéü *Dne≈°n√≠ tiket ‚Äì p≈ôehled z√°pas≈Ø:*\n\n"

    for game in ticket_data:
        total_odds *= game["odds"]
        start_utc = datetime.fromisoformat(game["time"].replace("Z", "+00:00"))
        prague_time = start_utc.astimezone(pytz.timezone("Europe/Prague"))
        game_time = prague_time.strftime("%d.%m.%Y %H:%M")
        highlight = "üî•" if game["probability"] >= 75 else ""

        ticket_message += (
            f"{highlight} *{game['sport']} ‚Äì {game['league']}*\n"
            f"Z√°pas: {game['home']} vs {game['away']}\n"
            f"ƒåas: {game_time}\n"
            f"Doporuƒçen√° s√°zka: *{game['team']}* @ {game['odds']}\n"
            f"Pravdƒõpodobnost v√Ωhry: *{game['probability']} %*\n\n"
        )

    win_probability = round((1 / total_odds) * 100, 2)
    

    await send_long_message(update, ticket_message)



# Spu≈°tƒõn√≠ bota
def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("premium", premium))
    application.add_handler(CommandHandler("debug", debug))
    application.add_handler(CommandHandler("nastaveni", nastaveni))
    application.add_handler(CommandHandler("tiket", tiket))
    application.add_handler(CommandHandler("stav", stav))
    application.run_polling()

async def stav(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.effective_user.id

    if telegram_id == OWNER_ID:
        await update.message.reply_text("‚úÖ M√°≈° pln√Ω p≈ô√≠stup jako spr√°vce tohoto bota.")
        return

    if is_registered_user(telegram_id):
        await update.message.reply_text("‚úÖ M√°≈° p≈ô√≠stup k pr√©miov√Ωm funkc√≠m.")
    else:
        await update.message.reply_text(
            "‚õî Nem√°≈° p≈ô√≠stup k tomuto botovi.\n"
            "Zaregistruj se na webu pro z√≠sk√°n√≠ p≈ô√≠stupu."
        )


def run_bot():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stav", stav))
    application.add_handler(CommandHandler("premium", premium))
    application.add_handler(CommandHandler("tiket", tiket))
    application.add_handler(CommandHandler("debug", debug))
    application.add_handler(CommandHandler("nastaveni", nastaveni))

    print("‚úÖ Telegram bot bƒõ≈æ√≠...")
    application.run_polling()

    def is_registered(telegram_id):
        try:
            response = requests.get(f"https://vasbot.cz/api/check_user?id={telegram_id}", timeout=5)
            data = response.json()
            return data["status"] == "ok"
        except:
            return False

# Voliteln√© spu≈°tƒõn√≠ samostatnƒõ
if __name__ == "__main__":
    run_bot()


